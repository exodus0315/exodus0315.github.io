[{"content":"input 태그란 사용자에게 입력(데이터, 값)을 받을 수 있는 태그입니다.\n사용자의 데이터를 받을 수 있기 떄문에 정말 많이 쓰이고 다양하게 활용이 가능한 태그입니다.\n프로젝트 연습을 하다가 HTML input tag를 자주 써봤고, 앞으로도 자주 쓸 것 같아서 몇가지를 기록해두고자 합니다.\n\u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt; input 태그의 기본 타입(type)은 text이며, 타입(type) 특성에 따라 다양하게 응용이 가능합니다.\n타입은 text 뿐 아니라 button, file, password, tel 등 정말 다양합니다.\n타입에 대해 자세히 알고 싶으시면 MDN input 유형 에서 비교하며 보실 수 있습니다.\n저는 타입에 대해 좀 더 분석하며 비교하기보다는 제가 썼던, 앞으로도 쓸 것 같은 몇가지만 정리하려고 합니다.\n input 태그 안에 문구(힌트) 보이게 하기 placeholder 속성을 사용하시면 해당 input 태그가 어떤 용도, 어떻게 쓸 수 있는지 힌트를 줄 수 있습니다.\n\u0026lt;input type=\u0026#34;search\u0026#34; placeholder=\u0026#34;Search name\u0026#34; /\u0026gt; 위와 같이 사용하면 input 태그 안에 Search name 이라는 문구가 기록되어\n사용자는 \u0026ldquo;이름을 입력하면 되겠구나.\u0026rdquo; 라고 자연스럽게 생각할 수 있습니다.\n참고로 search 타입을 사용하면 input 우측에 [ X ]가 생겨서 내용을 쉽게 지울 수 있습니다.\n input 태그 선택 시 안에 있는 내용 지우기 input 객체를 다시 선택하면 입력했던 내용들을 초기화시키는 방법입니다.\n아래와 같이 onfocus 속성을 쓰시면 됩니다.\nonfocus=\u0026#34;this.value=\u0026#39;\u0026#39;\u0026#34; 위처럼 사용하시면 input 선택 시, 선택한 input의 값이 비워지게 됩니다.\nonfocus와 반대로 onblur를 사용하시면 해당 input를 선택하지 않았을 때의 기능도 구현할 수 있습니다.\n\u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Search name\u0026#34; onfocus=\u0026#34;this.value=\u0026#39;\u0026#39;\u0026#34; onblur=\u0026#34;inputBlur()\u0026#34; /\u0026gt; 위와 같이 자바스크립트(Javascript)와 함께 사용도 가능합니다.\n 특정 키 입력 시 자바스크립트 함수 실행시키기 저는 input에서 검색값을 입력한 뒤 키보드의 엔터키를 눌러 즉시 검색이 되도록 할 때 사용했습니다.\nonKeypress=\u0026#34;javascript:if(event.keyCode==13){search()}\u0026#34; 13번 키코드(keyCode)를 눌렀을 때 자바스크립트의 search 함수가 실행되도록 onKeypress를 사용했습니다.\n참고로 13번 키 코드는 키보드의 엔터(Enter) 입니다.\nsearch() 와 같이 자바스크립트 함수는 미리 정의해주셔야 합니다.\nMDN keyCode 에 들어가시면 더 다양한 키코드를 보실 수 있습니다.\n 오늘 정리했던 모든 것들을 사용해보면\n\u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Search name\u0026#34; onfocus=\u0026#34;this.value=\u0026#39;\u0026#39;\u0026#34; onKeypress=\u0026#34;javascript:if(event.keyCode==13){search()}\u0026#34; /\u0026gt; 위와 같이 사용할 수 있습니다.\n","permalink":"https://exodus0315.github.io/posts/javascript-input/","summary":"input 태그란 사용자에게 입력(데이터, 값)을 받을 수 있는 태그입니다.\n사용자의 데이터를 받을 수 있기 떄문에 정말 많이 쓰이고 다양하게 활용이 가능한 태그입니다.\n프로젝트 연습을 하다가 HTML input tag를 자주 써봤고, 앞으로도 자주 쓸 것 같아서 몇가지를 기록해두고자 합니다.\n\u0026lt;input type=\u0026#34;text\u0026#34; /\u0026gt; input 태그의 기본 타입(type)은 text이며, 타입(type) 특성에 따라 다양하게 응용이 가능합니다.\n타입은 text 뿐 아니라 button, file, password, tel 등 정말 다양합니다.\n타입에 대해 자세히 알고 싶으시면 MDN input 유형 에서 비교하며 보실 수 있습니다.","title":"HTML input 태그 활용 (엔터 눌렀을 때 이벤트 발생 등)"},{"content":"Github Hugo Blog 를 만들면서 설정했던 많은 것들을 공유하고자 합니다.\nHugo는 Go언어(golang)로 만들어진 것으로, 저는 고 언어에 대해 거의 모르는 상태에서 진행한 것들입니다.\n제 개인적인 여러 실험, 시행착오들로 결과를 만들어낸 것이기에 더 좋은 방법이 있을수도 있다는 것만 감안해주세요.\n 카테고리 설정하기 (Setting the category) 처음 블로그를 세팅하면 기본적으로 Tags, Categories가 있지만, 아마 다른 것들도 많이 활용하고 싶으실겁니다.\n저는 자기소개(About Me), 모든 글 보기(Posts), 기간 순으로 글 보기(Archive), 태그(Tags), 검색(Search)를 써보겠습니다.\nconfig.yml 수정과 content 폴더 내에서의 페이지 만들기를 진행해야 합니다.\n제 기준으로 진행해보겠습니다.\nStep 1. config.yml 수정 메인 폴더에 있는 config.yml 을 열어 menu 항목을 찾아 아래와 같이 수정합니다.\nmenu: main: - identifier: about  # 해당 메뉴의 ID라고 보시면 됩니다. name: About Me  # 상단 메뉴에서 표현할 문구입니다. url: /about/  # 해당 메뉴의 주소, 혹은 경로입니다. 대부분의 메뉴 url은 사용자가 직접 만들어야 합니다. weight: 10 # 쉽게 말하면 순서 같은 것입니다. 1,2,3,4,5 와 같은 순서로 하셔도 됩니다. - identifier: posts name: Posts url: /posts/ weight: 20 - identifier: archive name: Archive url: /archives/ weight: 30 - identifier: tags  # 추가 설정없이 쉽게 즉시 사용가능한 메뉴 형태입니다. name: Tags url: /tags/ weight: 40 - identifier: search name: Search url: /search/ weight: 50 위와 같이 config.yml을 수정한 뒤 저장하셨더라도 추가 설정은 해주셔야 합니다.\nStep 2. page 만들기 config에 설정한 메뉴대로 페이지를 구성해보겠습니다.\nurl에 맞는 페이지는 content 폴더에서 설정할 수 있습니다.\n. ├── content/ │ ├── posts/ \u0026lt;--- Create posts folder │ │ └── newPost.md \u0026lt;--- Create newPost.md │ ├── about.md \u0026lt;--- Create about.md │ ├── archives.md \u0026lt;--- Create archive.md │ └── search.md \u0026lt;--- Create search.md └── config.yml 위에 보여드린 것처럼 1개의 폴더와 4개의 md(markdown)파일을 생성하시면 됩니다.\n생성하신 뒤 md파일의 내용을 수정하시면 됩니다.\nmd파일 안의 내용을 하나씩 소개해드리겠습니다.\nposts content 폴더 안에 posts라는 이름의 폴더를 생성하시면 끝입니다.\nposts 안에 글을 하나씩 추가하실 때마다 posts에 자동으로 분류되어 표현됩니다.\n이걸 응욯하시면 메뉴 별로 게시글들을 나눠서 표현할수도 있습니다.\nabout.md ---\rtitle: About me # 제목입니다.\rshowtoc: false # 마크다운 문법 중 제목(#, ## 등) 사용 시 toc가 발생할 수 있으니 toc를 미사용 설정합니다.\rhidemeta: true # 게시글 작성일자, 글 작성자 등 내용을 안 보이게 합니다.\rcomments: false # 하단에 댓글 창이 안 보이도록 설정합니다.\rsearchHidden: true # 검색할 때 해당 글이 검색되기 때문에 검색에서 안 보이게 설정합니다.\rShowBreadCrumbs: false # 타이틀 위에 해당 글의 위치(경로)가 보이기 때문에 안 보이게 합니다.\r---\r여기서부터는 자기소개 내용을 작성하시면 됩니다.\r복사-붙여넣기 하실때는 주석을 제거해주세요.\n위에 타이틀을 제외한 하단의 5개 설정들은 config.yml의 설정에 따라 추가하셔도 되고 안 하셔도 됩니다.\n하단 5개의 페이지 변수가 안 적혀있을 때는 config.yml의 설정을 따라가고,\n페이지 변수를 게시글에 별도로 추가 작성시 페이지 변수를 따라가게 됩니다.\n참고로 페이지 변수는 hugo-PaperMod Wiki \u0026gt; Variables에서 보실 수 있습니다.\narchives.md 아카이브(archives)는 기본적으로 제공하는 레이아웃입니다.\n---\rtitle: Archive\rlayout: archives\rsummary: archives\r---\rsearch.md 검색(search)는 기본 제공하는 레이아웃입니다.\n---\rtitle: Search\rlayout: search\r---\r 블로그 빌드 및 배포 쉽게하기 (Blog build \u0026amp; deploy) Hugo는 빌드를 개인이 진행한 뒤 배포를 진행해야 합니다. (jekyll과 다른 점이라고 합니다.)\n빌드, git add, push 등을 할때마다 작성하면 번거롭고 귀찮기 때문에 반자동화해서 쉽게하는 방법을 소개해드립니다.\n2가지 방법이 있는데 쉘 스크립트(.sh)를 이용하는 방법과 깃허브 액션(github action)을 사용하는 방법이 있습니다.\n저는 쉘 스크립트(.sh)를 이용해보겠습니다.\n메인 폴더(blog)에 deploy.sh 파일을 생성한 뒤 아래와 같이 작성하시면 됩니다.\n#!/bin/bash # ./deploy.sh 로 실행가능 # Build the project. hugo -t PaperMod # github.io 레포 push위해 파일 경로 이동 cd public # 충돌 방지를 위해 한번 pull git pull origin master # git내용들 추가 git add . # Commit 바꾸기. git commit -m \u0026#34;원하는 커밋 메세지\u0026#34;를 입력하거나 # git commit만 입력시 커밋날짜를 메세지로 자동설정 msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # github.io 레포에 push git push origin master # 상위 폴더인 blog도 push위해 경로 변경 cd .. # blog 저장소 Commit \u0026amp; Push # 충돌 방지를 위해 한번 pull git pull origin master git add . msg=\u0026#34;rebuilding site `date`\u0026#34; if [ $# -eq 1 ] then msg=\u0026#34;$1\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; git push origin master 깃허브 업로드가 너무 불편하여 검색하던 중 고운소리의 블로그에서 도움을 얻었습니다.\n감사합니다.\n저는 파일은 만들었는데 이걸 실행하는 방법을 몰라 약간 해맸습니다\u0026hellip;\n프로젝트 폴더에서 마우스 우측 클릭 \u0026gt; \u0026ldquo;Windows 터미널에서 열기\u0026quot;를 클릭하신 다음\n./deploy.sh 를 입력하시면 됩니다.\n 댓글 이용하기 (comments) 처음에는 디스커스(Disqus)가 가장 유명하다고 해서 고려해봤는데 광고가 너무 많이 나오는 것 같더라고요\u0026hellip;\n그래서 오픈소스(Open source)이자 깃허브 이슈(Github issues)를 활용하는 utterances를 이용하기로 했습니다.\n  깃허브에 \u0026ldquo;blog-commnet\u0026quot;라는 이름의 새로운 리포지토리를 생성한다.\n  blog/layouts/partials 폴더 안에 comments.html 라는 파일을 생성한다. (폴더가 없으면 만든다.)\n  utterances 페이지로 들어간 뒤 순서대로 설정을 진행한다.\n    configuration \u0026gt; Repository \u0026gt; repo: 항목에 유저이름/리포지토리를 입력한다. (예시: exodus0315/blog-comment)\n  Blog Post ↔️ Issue Mapping 항목에서 원하는 이슈 타입을 설정한다.\n  Theme 항목에서 원하는 테마 형태를 선택한다.\n  Enable Utterances 항목에 있는 코드(Code)를 복사한다.\n  2번에서 생성한 comments.html 파일에 복사한 코드를 붙여넣기한다.  아래는 제 기준 예시입니다. 바로 복사-붙여넣기 해서 쓰실거면 repo 부분은 수정해주셔야 합니다.    \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;exodus0315/blog-comment\u0026#34; issue-term=\u0026#34;title\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async \u0026gt;\u0026lt;/script\u0026gt; config.yml에 comments를 사용하겠다는 설정을 하셔야 최종 적용됩니다.  config.yml을 여신 뒤 params 항목을 찾은 뒤 아래 comments: true를 추가해주셔야 합니다. 만약 여기서 설정 안해주신다면 게시글.md 파일에 변수를 별도로 추가해주셔야 합니다.    params: comments: true # 댓글 사용 (utterances) ","permalink":"https://exodus0315.github.io/posts/hugo-blog-papermod-customize-a/","summary":"Github Hugo Blog 를 만들면서 설정했던 많은 것들을 공유하고자 합니다.\nHugo는 Go언어(golang)로 만들어진 것으로, 저는 고 언어에 대해 거의 모르는 상태에서 진행한 것들입니다.\n제 개인적인 여러 실험, 시행착오들로 결과를 만들어낸 것이기에 더 좋은 방법이 있을수도 있다는 것만 감안해주세요.\n 카테고리 설정하기 (Setting the category) 처음 블로그를 세팅하면 기본적으로 Tags, Categories가 있지만, 아마 다른 것들도 많이 활용하고 싶으실겁니다.\n저는 자기소개(About Me), 모든 글 보기(Posts), 기간 순으로 글 보기(Archive), 태그(Tags), 검색(Search)를 써보겠습니다.","title":"Github Blog Customizing (Category, Deploy, Comments)"},{"content":"Github Hugo Blog 를 만들기 위해 설치하는 중 발생한 에러에 대해 기술하겠습니다.\n좀 더 나은 해결방법, 좀 더 간결하고 깔끔한 해결방법이 있을 수 있겠지만 제 시행착오를 그대로 공유합니다.\n누군가는 저와 같은 현상을 겪으실수도 있으니까요.\n 1. 블로그 설치 중 에러 발생 구간 Github Blog 만들기 (Hugo, PaperMod)\n제가 작성한 이전 글(위 링크로 이동가능)에서 5. github에 업로드하여 블로그 게시하기 \u0026gt; 4번 항목에서 에러가 났습니다.\n 2. 삽질 과정 공유 Windows Terminal에서의 기록들을 작성하겠습니다.\nPS D:\\Project\\blog\u0026gt; git init Initialized empty Git repository in D:/Project/blog/.git/ PS D:\\Project\\blog\u0026gt; git remote add origin https://github.com/exodus0315/blog.git # 현재 이 줄까지는 정상 작동 PS D:\\Project\\blog\u0026gt; git submodule add -b master https://github.com/exodus0315/exodus0315.github.io.git public # 이 코드 입력부터 에러 발생 Cloning into \u0026#39;D:/Project/blog/public\u0026#39;... warning: You appear to have cloned an empty repository. fatal: \u0026#39;origin/master\u0026#39; is not a commit and a branch \u0026#39;master\u0026#39; cannot be created from it fatal: unable to checkout submodule \u0026#39;public\u0026#39; Fetching origin 보시면 아시겠지만, 4번째 줄 코드를 작성하고부터 주의, 에러 문구가 여러개 나왔습니다\u0026hellip;\n아마\u0026hellip; master 브랜치가 없으며, public을 체크아웃하지 못한다는 것 같았습니다.\n저는 깃허브 관련 지식이 전무하기 때문에 구글링하면서 아무거나 하나씩 따라해보았습니다.\nPS D:\\Project\\blog\u0026gt; git checkout public # checkout 할 수 없다고 하길래 체크아웃해보았습니다. 정답은 아닌 것 같습니다. error: pathspec \u0026#39;public\u0026#39; did not match any file(s) known to git PS D:\\Project\\blog\u0026gt; git submodule add -b master https://github.com/exodus0315/exodus0315.github.io.git public fatal: \u0026#39;public\u0026#39; does not have a commit checked out # public에 체크아웃된게 없다고 합니다. PS D:\\Project\\blog\u0026gt; cd public # public 폴더 진입 PS D:\\Project\\blog\\public\u0026gt; git add . # 체크아웃된게 없다고 하니까 해당 명령어 작성 PS D:\\Project\\blog\\public\u0026gt; cd .. # 이전 폴더로 빠져나오기 PS D:\\Project\\blog\u0026gt; git submodule add -b master https://github.com/exodus0315/exodus0315.github.io.git public fatal: \u0026#39;public\u0026#39; does not have a commit checked out # 생각해보니 public 폴더가 비어있으니 git add할 것도 없었죠... PS D:\\Project\\blog\u0026gt; hugo -t PaperMod # public 폴더가 비어있어서 체크아웃 못하는 것 같아서 빌드 진행했습니다. Start building sites … # 빌드 과정 중 발생한 메시지는 생략하겠습니다. PS D:\\Project\\blog\u0026gt; cd public # 이제 public 폴더에 파일들이 생겼을테니 public 폴더 진입 PS D:\\Project\\blog\\public\u0026gt; git add . # public 폴더 안에 있는 모든 파일들을 추가 warning: LF will be replaced by CRLF in categories/index.html. # git add 하니 이런 경고 메시지가 많이 등장했습니다. The file will have its original line endings in your working directory # CRLF라고 해서 플랫폼(OS) 간 차이 때문인데 아래 코드를 입력하여 해결할 수 있습니다. 자세한 설명은 생략합니다. PS D:\\Project\\blog\\public\u0026gt; git config --global core.autocrlf true # 이제 아래 코드를 입력해도 에러 메시지가 발생 안 했습니다. PS D:\\Project\\blog\u0026gt; git submodule add -b master https://github.com/exodus0315/exodus0315.github.io.git public PS D:\\Project\\blog\\public\u0026gt; git commit -m \u0026#34;first commit\u0026#34; # 커밋 메시지 입력 PS D:\\Project\\blog\\public\u0026gt; cd .. # 이전 폴더 진입 # 혹시 몰라서 아래 코드를 한번 더 입력해봤습니다. 이제 public 폴더가 이미 존재한다고 뜹니다. PS D:\\Project\\blog\u0026gt; git submodule add -b master https://github.com/exodus0315/exodus0315.github.io.git public fatal: \u0026#39;public\u0026#39; already exists in the index PS D:\\Project\\blog\u0026gt; cd public # public 폴더에서 git add 한 것들을 이제 push 하기 위해 폴더 진입 PS D:\\Project\\blog\\public\u0026gt; git push origin master #깃 푸쉬 진행 error: src refspec master does not match any # 아마... master 브랜치가 없어서 생긴 현상 같았습니다. error: failed to push some refs to \u0026#39;https://github.com/exodus0315/exodus0315.github.io.git\u0026#39; PS D:\\Project\\blog\\public\u0026gt; git branch -M master # 마스터 브랜치 생성 PS D:\\Project\\blog\\public\u0026gt; git push origin master # 푸시 성공 발생한 로그들은 많이 생략했습니다.\ngit 명령어도 써본 적이 없기 때문에 쏟아져나오는 에러, 경고, 로그 메시지에 엄청 당황했습니다.\ngithub는 혼자 공부한다고 써봤지만 git 명령어가 아닌 GitHub Desktop을 써본 정도였습니다.\n내가 어디를 잘못한지 몰라 폴더, 리포지토리를 전부 삭제 후 다시 시도해보기도 몇 번 해봤습니다.\n똑같은 짓을 반복하고, 조~금씩 다르게도 시도해보면서 도전했더니 시간상으로 몇시간 정도 걸린 것 같습니다\u0026hellip;\n전체적으로 부족한 점이 많았지만 결과적으로는 브랜치에 대한 이해가 부족해서 발생한 현상인 것 같습니다\u0026hellip;\n아마 쌩초보자 분들은 저처럼 당황하실 수 있으니 제 삽질 경험을 공유해두겠습니다.\n사실 블로그를 만든 이유가 이 삽질 때문입니다.\n검색 실력이 부족해서인지, 관련 글들이 적어서인지 만족할만한 정확한 답변을 얻지 못했습니다.\n아마 영어 실력이 부족해서일수도 있겠죠.\n아무튼 저와 같은 분들에게 도움이 되었으면 합니다.\n","permalink":"https://exodus0315.github.io/posts/hugo-blog-papermod-install-error/","summary":"Github Hugo Blog 를 만들기 위해 설치하는 중 발생한 에러에 대해 기술하겠습니다.\n좀 더 나은 해결방법, 좀 더 간결하고 깔끔한 해결방법이 있을 수 있겠지만 제 시행착오를 그대로 공유합니다.\n누군가는 저와 같은 현상을 겪으실수도 있으니까요.\n 1. 블로그 설치 중 에러 발생 구간 Github Blog 만들기 (Hugo, PaperMod)\n제가 작성한 이전 글(위 링크로 이동가능)에서 5. github에 업로드하여 블로그 게시하기 \u0026gt; 4번 항목에서 에러가 났습니다.\n 2. 삽질 과정 공유 Windows Terminal에서의 기록들을 작성하겠습니다.","title":"Github Blog 만드는 중 발생한 에러 경험 (Hugo, PaperMod)"},{"content":"이번에 블로그를 만들면서 겪었던 방법과 시행착오들을 기록하려고 합니다.\n구글에 검색해보면 많은 깃허브 블로그 관련글들이 있지만, 제가 원하는 글은 적었습니다.\n특히나 Mac OS에서의 설명이 많았고, 초보자 입장에서 글이 잘 이해가 안되어서 저도 글을 적어봅니다.\n OS : Windows 10 64-bit\nUsed SW : Git, Windows Terminal, VSCode\nSSG : Hugo\nTheme : PaperMod\n 많은 정적 사이트 생성기(SSG, Static Site Generator)이 있지만 저는 Hugo를 활용하기로 마음먹었습니다.\n많은 이유들이 있겠지만 빠르고, ruby보다는 go라는 언어에 대해 관심도 좀 더 있었고, Jamstack Site Generators에서 많은 별점도 받고 있었습니다.\n결정적으로는\u0026hellip; 개발에 대해 아직 아무것도 모르는 입장에서 \u0026ldquo;내가 원하는 테마가 있는가?\u0026rdquo; 도 중요한 것 같습니다.\n저는 Hugo Themes 사이트에서 PaperMod 라는 테마가 마음에 들어 위 이유와 함께 최종적으로 휴고(Hugo)를 선택했습니다.\n동적 사이트 vs 정적 사이트, jekyll, Hugo 등 정적 사이트 생성기의 장단점은 따로 서술하지 않겠습니다.\ngithub blog에서 사용가능한 정적 사이트 생성기들이 많으니 비교해보시면 되겠습니다.\n 1. Git 설치 Git Download\n위 사이트에서 PC에 맞는 OS에 맞게 설치하시면 되겠습니다.\n설치를 진행한 뒤 명령 프롬프트(cmd)에서 아래 메시지를 입력하셔서 enter 누르시면 버전을 보실 수 있습니다.\ngit version 만약 버전이 안 나오시면 설치가 잘못 된 것입니다.\n참고로 저는 앞으로 cmd 대신 Windows Terminal 을 기준으로 설명드리겠습니다. (Windows Terminal 설치)\n 2. Hugo 설치 Hugo Download\n  위 사이트에 들어간 뒤 스크롤을 약간 내리신 뒤 Assets 항목에서 OS에 맞는 파일을 다운로드받는다.\n  C:\\hugo\\bin 폴더에 압축을 해제한다. (해당 폴더가 없다면 폴더를 만들어서 진행)\n  윈도우 검색(Widnows키 + Q)에서 \u0026ldquo;시스템 환경 변수 편집\u0026quot;을 검색한 뒤, 하단의 [환경 변수]를 클릭한다.\n  하단 시스템 변수 \u0026gt; Path 선택 \u0026gt; [편집] 버튼 클릭 \u0026gt; [새로 만들기] 버튼 클릭 \u0026gt; C:\\hugo\\bin 추가\n  Windows Terminal에서 hugo version 을 쳐서 제대로 설치되었는지 확인하기\n  ※ 위 내용은 Install Hugo \u0026gt; Windows에서 확인하실 수 있습니다. (영상 참고 가능)\n대부분은 공식 사이트에서 해당 내용들을 확인할 수 있습니다. (영어라는 단점이 있지만요\u0026hellip;)\n 3. Hugo 프로젝트 만들기 아래 내용들은 hugo-PaperMod Installation을 참고하여 작성하였습니다.\n테마 별로 설치 가이드 페이지가 대부분 있으니 따라하시면 됩니다.\n 원하는 폴더에 들어가서 마우스 우측 클릭 후 [Windows 터미널에서 열기]를 클릭한다.  Windows Terminal에서 아래 코드를 입력한다. 저는 \u0026lt;프로젝트 이름\u0026gt;에 blog 라고 작성하였습니다.  hugo new site blog -f yml # hugo new site \u0026lt;프로젝트 이름\u0026gt; -f yml blog 라는 폴더가 만들어졌으면 아래 코드를 입력하여 폴더에 진입한다.  cd blog # cd \u0026lt;프로젝트 이름\u0026gt; hugo-PaperMod Installation 사이트에 들어가서 3가지 방법 중 하나를 선택하여 진행한다.   Method 1 : git clone 활용 (code를 복사-붙여넣기 하면 알아서 설치 진행)\nMethod 2 : git submodule 활용 (code를 복사-붙여넣기 하면 알아서 설치 진행)\nMethod 3 : 압축 파일을 다운로드 받아 직접 적용 (저는 3번 방법을 썼기 때문에 3번 방식대로 서술하겠습니다.)\n Method 3번 기준, 압축 파일을 blog/themes 폴더에 압축 해제한다.   저는 폴더 이름을 PaperMod 로 수정하였습니다. (최종 폴더명 : blog/themes/PaperMod)\n 테마 적용 후, blog 폴더에 있는 config.yml을 열어 Sample config.yml에 들어가서 code를 복사-붙여넣기한 뒤 저장한다.   4. 글 작성하기 \u0026amp; 로컬 서버 실행하기  Windows Terminal에서 아래 코드를 입력하여 새 포스트(새 글)를 생성해본다.  hugo new --kind post test.md # hugo new --kind post \u0026lt;file name\u0026gt; Windows Terminal에서 아래 코드를 입력하여 서버를 실행해본다.  hugo server 인터넷 브라우저 주소창에 \u0026ldquo;localhost:1313\u0026rdquo; 을 입력하여 잘 실행되는지 확인한다.   5. github에 업로드하여 블로그 게시하기  github에 2개의 리포지토리(repository)를 생성한다.   1번째 리포지토리 : blog\n2번쨰 리포지토리 : \u0026lt;깃허브 아이디\u0026gt;.github.io (제 기준, exodus0315.github.io)\n  혹시 blog 폴더에 public 폴더가 있다면 미리 삭제해준다.\n  Windows Terminal에서 아래 코드를 입력한다. (blog 폴더 경로에서 진행되어야 함)\n  git init git remote add origin \u0026lt;1번째 리포지토리 주소\u0026gt; # 리포지토리 주소 규칙은 일반적으로 https://github.com/\u0026lt;유저이름(user name)\u0026gt;/\u0026lt;리포지토리 이름\u0026gt;.git # 깃허브에서 리포지토리에 들어가면 주소를 쉽게 확인 및 복사-붙여넣기 가능 Windows Terminal에서 아래 코드를 입력한다.  git submodule add -b master \u0026lt;2번째 리포지토리 주소\u0026gt; public Windows Terminal에서 아래 코드를 입력하여 테마를 빌드해준다.  hugo -t PaperMod # hugo -t \u0026lt;테마 이름\u0026gt; 아래 코드를 순서대로 진행하여 깃허브에 빌드된 테마들을 업로드한다.  cd public # public 폴더로 진입 git add . git commit -m \u0026#34;\u0026lt;커밋 메세지\u0026gt;\u0026#34; git push origin master cd .. # 이전 폴더로 진입 (blog 폴더로 돌아감) git add . git commit -m \u0026#34;\u0026lt;커밋 메세지\u0026gt;\u0026#34; git push origin master 이후 인터넷 브라우저 주소창에 \u0026lt;유저이름\u0026gt;.github.io를 입력하여 블로그에 접속한 뒤 확인한다.   순서대로만 따라하면 깃허브 블로그를 만들 수 있도록 쉽게 작성하려고 했는데 글솜씨가 부족해서인지 어렵네요.\n이후에는 설치 중 발생한 에러, 간단한 테마 설정에 대해 글을 쓰도록 하겠습니다.\n","permalink":"https://exodus0315.github.io/posts/hugo-blog-papermod-install/","summary":"이번에 블로그를 만들면서 겪었던 방법과 시행착오들을 기록하려고 합니다.\n구글에 검색해보면 많은 깃허브 블로그 관련글들이 있지만, 제가 원하는 글은 적었습니다.\n특히나 Mac OS에서의 설명이 많았고, 초보자 입장에서 글이 잘 이해가 안되어서 저도 글을 적어봅니다.\n OS : Windows 10 64-bit\nUsed SW : Git, Windows Terminal, VSCode\nSSG : Hugo\nTheme : PaperMod\n 많은 정적 사이트 생성기(SSG, Static Site Generator)이 있지만 저는 Hugo를 활용하기로 마음먹었습니다.\n많은 이유들이 있겠지만 빠르고, ruby보다는 go라는 언어에 대해 관심도 좀 더 있었고, Jamstack Site Generators에서 많은 별점도 받고 있었습니다.","title":"Github Blog 만들기 (Hugo, PaperMod)"},{"content":"제 블로그의 첫번째 글입니다.\n비전공자, 비개발자, 30살이 넘어서 시작하는 입장이기에 더 많이 어렵습니다.\n기초도 없고, 주변에 물어볼 사람도 없고, 길이 뚜렷하기 않기에 많은 시행착오를 겪고 있습니다.\n그러다보니 많은 검색을 했고, 많은 분들에게 많은 도움을 받았습니다.\n제가 배웠던, 제가 경험했던, 제가 정리하고 싶은 글들을 자주 올려서 많은 분들에게 도움이 되기 위해 블로그를 만들었습니다.\n앞으로 꾸준히 활동하고자 합니다.\n많은 분들이 상상하는대로 모든 일들이 잘 이루어졌으면 좋겠습니다.\n","permalink":"https://exodus0315.github.io/posts/first-post/","summary":"제 블로그의 첫번째 글입니다.\n비전공자, 비개발자, 30살이 넘어서 시작하는 입장이기에 더 많이 어렵습니다.\n기초도 없고, 주변에 물어볼 사람도 없고, 길이 뚜렷하기 않기에 많은 시행착오를 겪고 있습니다.\n그러다보니 많은 검색을 했고, 많은 분들에게 많은 도움을 받았습니다.\n제가 배웠던, 제가 경험했던, 제가 정리하고 싶은 글들을 자주 올려서 많은 분들에게 도움이 되기 위해 블로그를 만들었습니다.\n앞으로 꾸준히 활동하고자 합니다.\n많은 분들이 상상하는대로 모든 일들이 잘 이루어졌으면 좋겠습니다.","title":"My 1st post"}]